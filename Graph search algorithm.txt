class Graph:
    def _init_(self):
        # Using a dictionary to represent the graph
        self.graph = {}
    def add_node(self, node):
        if node not in self.graph:
            self.graph[node] = []
    def add_edge(self, node1, node2):
        if node1 in self.graph and node2 in self.graph:
            self.graph[node1].append(node2)
        else:
            print("One or both nodes not found in graph.")
    def visit_nodes(self, start_node):
        visited = set()
        self._dfs(start_node, visited)
    def _dfs(self, node, visited):
        if node not in visited:
            visited.add(node)
            # 4. Print visited node
            print(f"Visited: {node}")
            for neighbor in self.graph.get(node, []):
                self._dfs(neighbor, visited)
g = Graph()
g.add_node("A")
g.add_node("B")
g.add_node("C")
g.add_node("D")
g.add_edge("A", "B")
g.add_edge("A", "C")
g.add_edge("B", "D")
g.visit_nodes("A")